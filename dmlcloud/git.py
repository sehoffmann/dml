"""
Provides functions to interact with git
"""

import subprocess
import sys
import traceback
from pathlib import Path


def is_setuptools_cli_script(module):
    """
    Heuristically checks if the given module is a cli script generated by setuptools.
    """
    if not hasattr(module, '__file__'):
        return False
    try:
        with open(module.__file__) as f:
            lines = f.readlines(4089)
    except OSError:
        return False

    if len(lines) != 8:
        return False
    if not lines[0].startswith('#!'):
        return False
    if lines[2] != 'import re\n':
        return False
    if lines[3] != 'import sys\n':
        return False
    if lines[5] != "if __name__ == '__main__':\n":
        return False
    if 'sys.exit(' not in lines[7]:
        return False
    return True


def script_path() -> Path | None:
    """
    Returns the path to the script or module that was executed.

    Returns None if python runs in interactive mode, or if "-c" command line option was used.

    Returns:
        Path to the script or module that was executed or None if not available.
    """
    main = sys.modules['__main__']
    if not hasattr(main, '__file__'):
        return None  # interactive mode

    if is_setuptools_cli_script(main):
        stack = traceback.extract_stack()
        if len(stack) < 2:
            return Path(main.__file__).resolve()
        return Path(stack[1].filename).resolve()

    else:
        return Path(main.__file__).resolve()


def script_directory() -> Path | None:
    """
    Returns the directory containing the script or module that was executed.

    Returns None if python runs in interactive mode, or if "-c" command line option was used.

    Returns:
        Directory containing the script or module that was executed or None if not available.
    """
    file = script_path()
    if file is None:
        return None
    else:
        return file.parent


def project_dir() -> Path | None:
    """
    Returns the top-level directory containing the script or module that was executed.

    Returns None if python runs in interactive mode, or if "-c" command line option was used.

    Returns:
        Top-level directory containing the script or module that was executed or None if not available.
    """
    cur_dir = script_directory()
    if cur_dir is None:
        return None

    while (cur_dir / '__init__.py').exists():
        cur_dir = cur_dir.parent
    return cur_dir


def run_in_project(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, **kwargs) -> subprocess.CompletedProcess:
    """
    Runs a command in the project directory and returns the output.

    Raises:
        RuntimeError: If the project directory could not be determined.
    """
    cwd = project_dir()
    if cwd is None:
        raise RuntimeError('Could not determine project directory')
    return subprocess.run(cmd, cwd=cwd, stdout=stdout, stderr=stderr, **kwargs)


def git_hash(short=False) -> str | None:
    """
    Returns the git hash of the current commit.

    If git is not available or the project is not a git repository, None is returned.

    Args:
        short: If True, the short hash is returned.

    Returns:
        The git hash of the current commit or None if not available.
    """
    try:
        if short:
            process = run_in_project(['git', 'rev-parse', '--short', 'HEAD'])
        else:
            process = run_in_project(['git', 'rev-parse', 'HEAD'])
        return process.stdout.decode('utf-8').strip()
    except RuntimeError:
        return None


def git_diff() -> str | None:
    """
    Returns the output of `git diff -U0 --no-color HEAD`

    If git is not available or the project is not a git repository, None is returned.

    Returns:
        The output of `git diff -U0 --no-color HEAD` or None if not available.
    """

    try:
        process = run_in_project(['git', 'diff', '-U0', '--no-color', 'HEAD'])
        return process.stdout.decode('utf-8').strip()
    except RuntimeError:
        return None
